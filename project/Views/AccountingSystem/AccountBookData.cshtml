@using System.Text.Encodings.Web
@model List<project.Models.TransactionList>

@{
    ViewBag.Title = "Account Book Data";
}

@if (TempData["DeleteSuccess"] != null)
{
    var message = JavaScriptEncoder.Default.Encode(TempData["DeleteSuccess"].ToString());
    <script type="text/javascript">
        alert('@message');
    </script>
}

<h1>帳本資料
</h1>
<hr />

<div class="mt-4">
    <a href="@Url.Action("AccountBookList", "AccountingSystem")" class="btn btn-secondary">
        返回帳本列表
    </a>
    <a href="@Url.Action("TransactionInsert", "AccountingSystem", new { accountBookId=ViewBag.AccountBookId })" class="btn btn-primary">
        新增
    </a>
    <a href="@Url.Action("ShowReport", "AccountingSystem", new { accountBookId=ViewBag.AccountBookId })" class="btn btn-success">
        顯示財務報表
    </a>
    <button type="button" id="exportBtn" class="btn btn-success">匯出帳本</button>
    <script>
        document.getElementById('exportBtn').onclick = function() {
            var userId = '@ViewBag.User';
            var accountBookId = '@ViewBag.AccountBookId';
            window.location.href = '/CSVInoutput/ExportAccountBook?userId=' + userId + '&accountBookId=' + accountBookId;
        };
    </script>

</div><br />    

<div class="mb-4">
    <label for="currencySelector" class="form-label">選擇顯示幣別：</label>
    <select id="currencySelector" class="form-select" style="width: 200px;">
        <option value="TWD">新台幣 (TWD)</option>
        <option value="USD">美元 (USD)</option>
        <option value="EUR">歐元 (EUR)</option>
        <option value="JPY">日圓 (JPY)</option>
    </select>
</div>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th class="text-center" style="width: 10%;">修改</th>
            <th class="text-center" style="width: 10%;">刪除</th>
            <th style="display:none;">交易編號</th>
            <th>日期</th>
            <th>類別</th>
            <th>描述</th>
            <th>金額</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td class="text-center" style="width: 10%;">
                    <a href="@Url.Action("TransactionUpdate", "AccountingSystem", new { id = item.TransactionId })" class="btn btn-primary">
                        修改
                    </a>
                </td>
                <td class="text-center" style="width: 10%;">
                    <a href="@Url.Action("TransactionDelete", "AccountingSystem", new { transactionId = item.TransactionId, accountBookId = item.AccountBookId })"
                       class="btn btn-danger"
                       onclick="return confirm('確定要刪除嗎？');">
                        刪除
                    </a>
                </td>
                <td style="display:none;">@item.TransactionId</td>
                <td>@item.Date</td>
                <td>@item.Category</td>
                <td>@item.Description</td>
                <td class="amount-cell" data-amount="@item.Amount">@($"{item.Currency} {item.Amount:N2}")</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        document.getElementById("currencySelector").addEventListener("change", async function () {
            const selectedCurrency = this.value;
            const amountCells = document.querySelectorAll(".amount-cell");

            if (selectedCurrency === "TWD") {
                amountCells.forEach(cell => {
                    const amount = parseFloat(cell.dataset.amount);
                    if (!isNaN(amount)) {
                        cell.textContent = `TWD ${amount.toLocaleString(undefined, {
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0
                        })}`;
                    }
                });
                return;
            }

            try {
                const response = await fetch('/AccountingSystem/GetExchangeRates');
                const data = await response.json();

                const USD_TO_TWD_KEY = "USDTWD";
                const USD_TO_TARGET_KEY = "USD" + selectedCurrency;

                const usdToTwd = data[USD_TO_TWD_KEY]?.Exrate;
                const usdToTarget = data[USD_TO_TARGET_KEY]?.Exrate;

                if (!usdToTwd || !usdToTarget) {
                    console.error(`缺少匯率資料：${USD_TO_TWD_KEY} 或 ${USD_TO_TARGET_KEY}`);
                    alert("無法取得匯率資料，請稍後再試！");
                    return;
                }

                const twdToTarget = usdToTarget / usdToTwd;

                amountCells.forEach(cell => {
                    const twdAmount = parseFloat(cell.dataset.amount);
                    if (!isNaN(twdAmount)) {
                        const converted = twdAmount * twdToTarget;
                        cell.textContent = `${selectedCurrency} ${converted.toLocaleString(undefined, {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        })}`;
                    }
                });

            } catch (error) {
                console.error("匯率查詢失敗：", error);
                alert("匯率查詢失敗，請檢查網路連線或稍後再試！");
            }
        });
    </script>
}